import os
import sys
from typing import Any

import numpy as np
from scm.plams import Job, JobManager, JobRunner, KFFile, Molecule, Results, Settings, SingleJob

if sys.version_info >= (3, 8):
    from typing import TypedDict
else:
    from typing_extensions import TypedDict

class _TimingsDict(TypedDict):
    elapsed: float
    system: float
    cpu: float

class AMSResults(Results):
    rkfs: dict[str, KFFile]
    job: AMSJob
    def __init__(self, job: AMSJob) -> None: ...
    def collect(self) -> None: ...
    def refresh(self) -> None: ...
    def engine_names(self) -> list[str]: ...
    def rkfpath(self, file: str = ...) -> str: ...
    def readrkf(self, section: str, variable: str, file: str = ...) -> Any: ...
    def read_rkf_section(self, section: str, file: str = ...) -> dict[str, Any]: ...
    def get_rkf_skeleton(self, file: str = ...) -> dict[str, set[str]]: ...
    def get_molecule(self, section: str, file: str = ...) -> Molecule: ...
    def get_input_molecule(self) -> Molecule: ...
    def get_main_molecule(self) -> Molecule: ...
    def get_history_molecule(self, step: int) -> Molecule: ...
    def get_history_variables(self, history_section: str = ...) -> set[str]: ...
    def get_history_property(self, varname: str, history_section: str = ...) -> list[Any]: ...
    def get_property_at_step(self, step: int, varname: str, history_section: str = ...) -> Any: ...
    def get_engine_results(self, engine: None | str = ...) -> dict[str, Any]: ...
    def get_engine_properties(self, engine: None | str = ...) -> dict[str, Any]: ...
    def get_energy(self, unit: str = ..., engine: None | str = ...) -> float: ...
    def get_gradients(self, energy_unit: str = ..., dist_unit: str = ..., engine: None | str = ...) -> np.ndarray: ...
    def get_stresstensor(self, engine: None | str = ...) -> np.ndarray: ...
    def get_hessian(self, engine: None | str = ...) -> np.ndarray: ...
    def get_elastictensor(self, engine: None | str = ...) -> np.ndarray: ...
    def get_frequencies(self, unit: str = ..., engine: None | str = ...) -> np.ndarray: ...
    def get_charges(self, engine: None | str = ...) -> np.ndarray: ...
    def get_dipolemoment(self, engine: None | str = ...) -> np.ndarray: ...
    def get_dipolegradients(self, engine: None | str = ...) -> np.ndarray: ...
    def get_timings(self) -> _TimingsDict: ...
    def recreate_molecule(self) -> None | Molecule: ...
    def recreate_settings(self) -> None | Settings[str, Any]: ...
    def ok(self) -> bool: ...
    def get_errormsg(self) -> str: ...
    @property
    def name(self) -> str: ...

class AMSJob(SingleJob):
    results: AMSResults
    def run(self, jobrunner: None | JobRunner[Any] = ..., jobmanager: None | JobManager = ..., **kwargs: Any) -> AMSResults: ...
    def get_input(self) -> str: ...
    def get_runscript(self) -> str: ...
    def check(self) -> bool: ...
    def get_errormsg(self) -> str: ...
    def hash_input(self) -> str: ...
    @classmethod
    def from_inputfile(
        cls, filename: str | os.PathLike[str], heredoc_delimit: str = ..., *, name: str = ..., depend: None | list[Job] = ...
    ) -> AMSJob: ...
    @staticmethod
    def settings_to_mol(s: Settings[str, Any]) -> dict[str, Molecule]: ...
