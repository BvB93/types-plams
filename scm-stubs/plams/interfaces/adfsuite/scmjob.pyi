from os import PathLike
from typing import TypeVar, Union, Dict, Collection, Type, Optional, List, Any

import numpy as np
from scm.plams import Job, KFFile, SingleJob, Results, Molecule, Settings

CT = TypeVar("CT", bound=Collection[Any])
JT = TypeVar("JT", bound=SCMJob)

class SCMResults(Results):
    job: SCMJob
    _kf: KFFile
    def __init__(self, job: SCMJob) -> None: ...
    def collect(self) -> None: ...
    def refresh(self) -> None: ...
    def readkf(self, section: str, variable: str) -> Any: ...
    def newkf(self, filename: Union[str, PathLike[str]]) -> KFFile: ...
    def get_properties(self) -> Dict[str, Any]: ...
    def get_molecule(
        self,
        section: str,
        variable: str,
        unit: str = ...,
        internal: bool = ...,
        n: int = ...,
    ) -> Molecule: ...
    def to_input_order(self, data: CT) -> CT: ...
    def readarray(self, section: str, subsection: str, **kwargs: Any) -> np.ndarray: ...

class SCMJob(SingleJob):
    results: SCMResults
    def get_input(self) -> str: ...
    def get_runscript(self) -> str: ...
    def check(self) -> bool: ...
    def hash_input(self) -> str: ...
    @classmethod
    def from_inputfile(
        cls: Type[JT],
        filename: Union[str, PathLike[str]],
        heredoc_delimit: str = ...,
        *,
        name: str = ...,
        depend: Optional[List[Job]] = ...,
    ) -> JT: ...
    @staticmethod
    def settings_to_mol(s: Settings[str, Any]) -> None: ...
