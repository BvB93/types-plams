import os
import sys
from typing import Any, overload

from scm.plams import Job, JobManager, JobRunner, Molecule, Results, Settings, SingleJob

if sys.version_info >= (3, 8):
    from typing import Literal as L, TypedDict
else:
    from typing_extensions import Literal as L, TypedDict

class _MultigridDict(TypedDict):
    counts: list[int]
    cutoffs: list[float]

class Cp2kResults(Results):
    job: Cp2kJob
    def __init__(self, job: Cp2kJob) -> None: ...
    def recreate_settings(self) -> Settings[str, Any]: ...
    def get_runtime(self) -> float: ...
    def get_energy(self, index: int = ...) -> float: ...
    def get_dispersion(self, index: int = ...) -> float: ...
    @overload
    def get_mulliken_charges(self, return_spin: L[False] = ..., index: int = ...) -> float | list[float]: ...
    @overload
    def get_mulliken_charges(
        self, return_spin: L[True], index: int = ...
    ) -> tuple[float, float] | tuple[list[float], list[float]]: ...
    @overload
    def get_hirshfeld_charges(self, return_spin: L[False] = ..., index: int = ...) -> float | list[float]: ...
    @overload
    def get_hirshfeld_charges(
        self, return_spin: L[True], index: int = ...
    ) -> tuple[float, float] | tuple[list[float], list[float]]: ...
    def get_multigrid_info(self) -> _MultigridDict: ...

class Cp2kJob(SingleJob):
    results: Cp2kResults
    def __init__(
        self,
        copy: None | str | os.PathLike[str] | list[str | os.PathLike[str]] = ...,
        *,
        molecule: None | Molecule = ...,
        name: str = ...,
        settings: None | Settings[str, Any] | Job = ...,
        depend: None | list[Job] = ...,
    ) -> None: ...
    def run(self, jobrunner: None | JobRunner[Any] = ..., jobmanager: None | JobManager = ..., **kwargs: Any) -> Cp2kResults: ...
    def get_input(self) -> str: ...
    def get_runscript(self) -> str: ...
    def check(self) -> bool: ...

def Cp2kSettings2Mol(settings: Settings[str, Any]) -> None | Molecule: ...
