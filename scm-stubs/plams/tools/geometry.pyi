from collections.abc import Iterable, Sequence
from typing import Any, SupportsFloat

import numpy as np
import numpy.typing as npt

def rotation_matrix(vec1: npt.ArrayLike, vec2: npt.ArrayLike) -> npt.NDArray[np.floating[Any]]: ...
def axis_rotation_matrix(vector: npt.ArrayLike, angle: npt.ArrayLike, unit: str = ...) -> npt.NDArray[np.floating[Any]]: ...
def distance_array(array1: npt.ArrayLike, array2: npt.ArrayLike) -> npt.NDArray[np.floating[Any]]: ...
def angle(
    vec1: Iterable[str | bytes | SupportsFloat], vec2: Iterable[str | bytes | SupportsFloat], result_unit: str = ...
) -> np.float_: ...
def dihedral(
    p1: Iterable[str | bytes | SupportsFloat],
    p2: Iterable[str | bytes | SupportsFloat],
    p3: Iterable[str | bytes | SupportsFloat],
    p4: Iterable[str | bytes | SupportsFloat],
    unit: str = ...,
) -> np.float_: ...
def cell_shape(lattice: npt.ArrayLike) -> list[Any]: ...
def cell_lengths(lattice: npt.ArrayLike, unit: str = ...) -> list[float]: ...
def cell_angles(lattice: npt.ArrayLike, unit: str = ...) -> list[np.float_]: ...
def cellvectors_from_shape(box: npt.ArrayLike) -> list[float]: ...
