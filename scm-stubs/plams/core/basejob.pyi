import abc
import os
from collections.abc import Collection, Generator, Iterator
from typing import Any, Generic, TypeVar

from scm.plams import JobManager, JobRunner, Molecule, Results, Settings

JT = TypeVar("JT", bound=SingleJob)

class Job(metaclass=abc.ABCMeta):
    results: Results
    status: str
    name: str
    path: str
    jobmanager: None | JobManager
    parent: None | MultiJob[Any]
    settings: Settings[str, Any]
    default_settings: list[Settings[str, Any]]
    depend: list[Job]
    def __init__(
        self, name: str = ..., settings: None | Settings[str, Any] | Job = ..., depend: None | list[Job] = ...
    ) -> None: ...
    def run(self, jobrunner: None | JobRunner[Any] = ..., jobmanager: None | JobManager = ..., **kwargs: Any) -> Results: ...
    def pickle(self, filename: None | str | os.PathLike[str] = ...) -> None: ...
    def ok(self, strict: bool = ...) -> bool: ...
    @abc.abstractmethod
    def check(self) -> bool: ...
    @abc.abstractmethod
    def hash(self) -> None | str: ...
    def prerun(self) -> None: ...
    def postrun(self) -> None: ...

class SingleJob(Job, metaclass=ABCMeta):
    molecule: None | Molecule
    def __init__(
        self,
        molecule: None | Molecule = ...,
        *,
        name: str = ...,
        settings: None | Settings[str, Any] | Job = ...,
        depend: None | list[Job] = ...,
    ) -> None: ...
    @abstractmethod
    def get_input(self) -> Any: ...
    @abstractmethod
    def get_runscript(self) -> Any: ...
    def hash_input(self) -> str: ...
    def hash_runscript(self) -> str: ...
    def hash(self) -> str: ...
    def check(self) -> bool: ...
    def full_runscript(self) -> str: ...
    @classmethod
    def load_external(
        cls,
        path: str | os.PathLike[str],
        settings: None | Settings[str, Any] = ...,
        molecule: None | Molecule = ...,
        finalize: bool = ...,
    ) -> Job: ...

class MultiJob(Job, Generic[JT]):
    children: Collection[JT]
    childrunner: None | JobRunner[Any]
    def __init__(
        self,
        children: None | Collection[JT] = ...,
        childrunner: None | JobRunner[Any] = ...,
        *,
        name: str = ...,
        settings: None | Settings[str, Any] | Job = ...,
        depend: None | list[Job] = ...,
    ) -> None: ...
    def new_children(self) -> None: ...
    def hash(self) -> None: ...
    def check(self) -> bool: ...
    def other_jobs(self) -> Generator[JT, None, None]: ...
    def remove_child(self, job: JT) -> None: ...
    def __iter__(self) -> Iterator[JT]: ...
